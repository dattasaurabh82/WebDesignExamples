
<!-- BASIC PHP
			Jeff Thompson | 2013 | www.jeffreythompson.org
			
			PHP is a fantastic tool, running server-side (on the server, when the page
			is loading) then sending plain HTML to the user. PHP lets you do lots of
			fancy, cool, and downright useful stuff.
			
			In order to test PHP without a server, you need to run one locally. MAMP for
			Mac and XAMP for Windows are good, free tools for this.
			
			TO SET UP MAMP:
			Use the following steups, or see this tutorial: http://documentation.mamp.info/en/mamp/first-steps
			1. 	Launch MAMP, both the PHP and MySQL lights should come on (if not, you have larger problems...)
			2. 	Click Preferences > Apache... and choose a home folder; if you store all your website projects
					in one main folder (makes this easier) then select that.
			3.	Close MAMP and re-launch; your default browswer should open to the selected folder. Navigate
					to your project's folder and voila!

-->

<html>
	<head>

		<!-- a basic variable and output! -->
		<?php  
			$username = "Jeff Thompson";
			echo "<title>Amazon.com | Welcome back " . $username . "!</title>";
		?>
		<title>My First PHP Page!</title>
	</head>

	<body>

		<!-- notice, if you look at the page source in your browser, that this
				 looks just like a regular HTML page... that's because it is!
				 
				 PHP simply generates HTML at the server, then sends it like a regular
				 HTML page -->

		<!-- PHP goes between the these tags and can be embedded in other HTML -->
		<?php 

		/* the 'echo' command is how we create HTML (and this is a comment) */
		echo "<h1>This is my first PHP page</h1>";

		/* PHP needs to be on a real server to be seen - we can fake this with
			 MAMP on your local machine, or (sometimes more easily) in a 'sandbox'
			 on your server using Filezilla */
	 
		/* look at the page source in the browser - notice that the PHP code is
			 gone and has been replaced with HTML; this makes PHP more secure for
			 things like passwords */
	 
		/* more complex code can be generated by stringing together several
			 statements, separated by '.' (like addition for PHP strings) */
		echo "<p>Today is " . date('F j') . ", " . date('Y') . ".</p>";  

		/* date returns today's date in various formats 
			 F is the month as a full text (ie: September)
			 j is the numercal day (1-31)
			 and Y is the full year (ie: 2012)
			 see documentation for details */
	 
		/* variables can store more complex values into a reusable container */
		/* variables always start with a $ and can have no spaces */
		$dayOfWeek = date('l');		/* set variable to the day of week */

		echo "<p>Today is a " . $dayOfWeek . ".</p>";

		/* a fancy example is up in the title bar! */

		/* PHP can make dynamic content that changes every time you visit!
			 here's a random image, loaded from a set of 3 options */
		echo "<p>A random kitty: <br>";
		$whichImage = rand(1,3);						/* creates a random # between 1 and 3 */
		echo "<img src=\"images/" . $whichImage . ".jpg\" />";
		echo "</p>";

		/* notice the \" which is a "literal" quote, meaning not the end of
			 the PHP string but an actual quotation mark */
	 
		/* one more, slightly more complex example using a "for loop" */
		echo "<p>All three kitties: <br>";
		$numImages = 3;																		/* total # of images */
		$i = 1;																						/* variable to increment */
		while ($i <= $numImages) {												/* if i is less than or = to the # of images */
			echo "<img src=\"images/" . $i . ".jpg\" />";		/* display the current image */
			$i++;																						/* don't forget to increment i or the page will never load! */
		}
		echo "</p>";

		?>

	</body>
</html>